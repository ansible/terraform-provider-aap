// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock_client.go -package provider
//

// Package provider is a generated GoMock package.
package provider

import (
	io "io"
	http "net/http"
	reflect "reflect"

	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	gomock "go.uber.org/mock/gomock"
)

// MockProviderHTTPClient is a mock of ProviderHTTPClient interface.
type MockProviderHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockProviderHTTPClientMockRecorder
	isgomock struct{}
}

// MockProviderHTTPClientMockRecorder is the mock recorder for MockProviderHTTPClient.
type MockProviderHTTPClientMockRecorder struct {
	mock *MockProviderHTTPClient
}

// NewMockProviderHTTPClient creates a new mock instance.
func NewMockProviderHTTPClient(ctrl *gomock.Controller) *MockProviderHTTPClient {
	mock := &MockProviderHTTPClient{ctrl: ctrl}
	mock.recorder = &MockProviderHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderHTTPClient) EXPECT() *MockProviderHTTPClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProviderHTTPClient) Create(path string, data io.Reader) ([]byte, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", path, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProviderHTTPClientMockRecorder) Create(path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProviderHTTPClient)(nil).Create), path, data)
}

// Delete mocks base method.
func (m *MockProviderHTTPClient) Delete(path string) ([]byte, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderHTTPClientMockRecorder) Delete(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProviderHTTPClient)(nil).Delete), path)
}

// DeleteWithStatus mocks base method.
func (m *MockProviderHTTPClient) DeleteWithStatus(path string) ([]byte, diag.Diagnostics, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWithStatus", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// DeleteWithStatus indicates an expected call of DeleteWithStatus.
func (mr *MockProviderHTTPClientMockRecorder) DeleteWithStatus(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithStatus", reflect.TypeOf((*MockProviderHTTPClient)(nil).DeleteWithStatus), path)
}

// Get mocks base method.
func (m *MockProviderHTTPClient) Get(path string) ([]byte, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderHTTPClientMockRecorder) Get(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProviderHTTPClient)(nil).Get), path)
}

// GetWithParams mocks base method.
func (m *MockProviderHTTPClient) GetWithParams(path string, params map[string]string) ([]byte, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithParams", path, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// GetWithParams indicates an expected call of GetWithParams.
func (mr *MockProviderHTTPClientMockRecorder) GetWithParams(path, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithParams", reflect.TypeOf((*MockProviderHTTPClient)(nil).GetWithParams), path, params)
}

// GetWithStatus mocks base method.
func (m *MockProviderHTTPClient) GetWithStatus(path string, params map[string]string) ([]byte, diag.Diagnostics, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithStatus", path, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetWithStatus indicates an expected call of GetWithStatus.
func (mr *MockProviderHTTPClientMockRecorder) GetWithStatus(path, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithStatus", reflect.TypeOf((*MockProviderHTTPClient)(nil).GetWithStatus), path, params)
}

// Update mocks base method.
func (m *MockProviderHTTPClient) Update(path string, data io.Reader) ([]byte, diag.Diagnostics) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", path, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProviderHTTPClientMockRecorder) Update(path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProviderHTTPClient)(nil).Update), path, data)
}

// UpdateWithStatus mocks base method.
func (m *MockProviderHTTPClient) UpdateWithStatus(path string, data io.Reader) ([]byte, diag.Diagnostics, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithStatus", path, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// UpdateWithStatus indicates an expected call of UpdateWithStatus.
func (mr *MockProviderHTTPClientMockRecorder) UpdateWithStatus(path, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithStatus", reflect.TypeOf((*MockProviderHTTPClient)(nil).UpdateWithStatus), path, data)
}

// doRequest mocks base method.
func (m *MockProviderHTTPClient) doRequest(method, path string, params map[string]string, data io.Reader) (*http.Response, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "doRequest", method, path, params, data)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// doRequest indicates an expected call of doRequest.
func (mr *MockProviderHTTPClientMockRecorder) doRequest(method, path, params, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "doRequest", reflect.TypeOf((*MockProviderHTTPClient)(nil).doRequest), method, path, params, data)
}

// getApiEndpoint mocks base method.
func (m *MockProviderHTTPClient) getApiEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getApiEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// getApiEndpoint indicates an expected call of getApiEndpoint.
func (mr *MockProviderHTTPClientMockRecorder) getApiEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getApiEndpoint", reflect.TypeOf((*MockProviderHTTPClient)(nil).getApiEndpoint))
}

// getEdaApiEndpoint mocks base method.
func (m *MockProviderHTTPClient) getEdaApiEndpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEdaApiEndpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// getEdaApiEndpoint indicates an expected call of getEdaApiEndpoint.
func (mr *MockProviderHTTPClientMockRecorder) getEdaApiEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEdaApiEndpoint", reflect.TypeOf((*MockProviderHTTPClient)(nil).getEdaApiEndpoint))
}

// setApiEndpoint mocks base method.
func (m *MockProviderHTTPClient) setApiEndpoint() diag.Diagnostics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setApiEndpoint")
	ret0, _ := ret[0].(diag.Diagnostics)
	return ret0
}

// setApiEndpoint indicates an expected call of setApiEndpoint.
func (mr *MockProviderHTTPClientMockRecorder) setApiEndpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setApiEndpoint", reflect.TypeOf((*MockProviderHTTPClient)(nil).setApiEndpoint))
}
