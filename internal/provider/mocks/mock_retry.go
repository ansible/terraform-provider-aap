// Code generated by MockGen. DO NOT EDIT.
// Source: retry.go
//
// Generated by this command:
//
//	mockgen -source=retry.go -destination=mocks/mock_retry.go
//

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	context "context"
	reflect "reflect"

	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	gomock "go.uber.org/mock/gomock"
)

// MockRetryOperation is a mock of RetryOperation interface.
type MockRetryOperation struct {
	ctrl     *gomock.Controller
	recorder *MockRetryOperationMockRecorder
	isgomock struct{}
}

// MockRetryOperationMockRecorder is the mock recorder for MockRetryOperation.
type MockRetryOperationMockRecorder struct {
	mock *MockRetryOperation
}

// NewMockRetryOperation creates a new mock instance.
func NewMockRetryOperation(ctrl *gomock.Controller) *MockRetryOperation {
	mock := &MockRetryOperation{ctrl: ctrl}
	mock.recorder = &MockRetryOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryOperation) EXPECT() *MockRetryOperationMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRetryOperation) Execute() ([]byte, diag.Diagnostics, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(diag.Diagnostics)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockRetryOperationMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRetryOperation)(nil).Execute))
}

// MockStateChangeConfForRetry is a mock of StateChangeConfForRetry interface.
type MockStateChangeConfForRetry struct {
	ctrl     *gomock.Controller
	recorder *MockStateChangeConfForRetryMockRecorder
	isgomock struct{}
}

// MockStateChangeConfForRetryMockRecorder is the mock recorder for MockStateChangeConfForRetry.
type MockStateChangeConfForRetryMockRecorder struct {
	mock *MockStateChangeConfForRetry
}

// NewMockStateChangeConfForRetry creates a new mock instance.
func NewMockStateChangeConfForRetry(ctrl *gomock.Controller) *MockStateChangeConfForRetry {
	mock := &MockStateChangeConfForRetry{ctrl: ctrl}
	mock.recorder = &MockStateChangeConfForRetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateChangeConfForRetry) EXPECT() *MockStateChangeConfForRetryMockRecorder {
	return m.recorder
}

// WaitForStateContext mocks base method.
func (m *MockStateChangeConfForRetry) WaitForStateContext(ctx context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStateContext", ctx)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForStateContext indicates an expected call of WaitForStateContext.
func (mr *MockStateChangeConfForRetryMockRecorder) WaitForStateContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStateContext", reflect.TypeOf((*MockStateChangeConfForRetry)(nil).WaitForStateContext), ctx)
}
